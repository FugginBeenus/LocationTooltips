plugins {
    id "java"
    id "fabric-loom" version "1.5.7"
    id "com.modrinth.minotaur" version "2.+"
}

group = (findProperty("group") ?: "com.fugginbeenus.locationtooltip")
version = (findProperty("version") ?: "0.1.1+3")

base {
    // Gradle 8+ requires .set(...)
    archivesName.set((findProperty("archives_base_name") ?: "locationtooltip").toString())
}

java {
    toolchain { languageVersion = JavaLanguageVersion.of(17) }
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://maven.shedaniel.me/" }                // Cloth Config
}

dependencies {
    // ---- Core ----
    minecraft "com.mojang:minecraft:${property('minecraft_version')}"
    mappings "net.fabricmc:yarn:${property('yarn_mappings')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property('loader_version')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('fabric_api_version')}"

    // ---- Optional (comment out if unused in code) ----
    modImplementation("com.terraformersmc:modmenu:${property('modmenu_version')}") { transitive = false }
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${property('cloth_config_version')}") {
        exclude group: "net.fabricmc.fabric-api"
    }
}

loom {
    // Nice for client/server split sources
    splitEnvironmentSourceSets()
}

// ---- Resource filtering (expands ${version} and ${mod_id} in fabric.mod.json) ----
tasks.processResources {
    inputs.property "version", project.version
    inputs.property "mod_id", (findProperty("mod_id") ?: "locationtooltip").toString()

    filesMatching("fabric.mod.json") {
        expand(
                "version": project.version,
                "mod_id" : (findProperty("mod_id") ?: "locationtooltip").toString()
        )
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 17
}

jar {
    from("LICENSE") { rename { "${it}_${project.base.archivesName.get()}" } }
}

remapJar {
    dependsOn jar
}

// ---- Unique build ID to avoid Modrinth duplicate-file errors ----
import java.util.UUID

def buildInfoDir = layout.buildDirectory.dir("generated/buildinfo")

tasks.register("generateBuildInfo") {
    outputs.file(buildInfoDir.map { it.file("META-INF/locationtooltip-build.id") })
    doLast {
        def outFile = buildInfoDir.get().file("META-INF/locationtooltip-build.id").asFile
        outFile.parentFile.mkdirs()
        outFile.text = """buildId=${UUID.randomUUID()}
buildTime=${new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")}
"""
    }
}

// Ensure generated build info exists before any jars are built
tasks.named("processResources").configure { dependsOn("generateBuildInfo") }
tasks.named("jar").configure { dependsOn("generateBuildInfo") }
tasks.named("sourcesJar").configure { dependsOn("generateBuildInfo") }
// Loom extras (if present in your project)
tasks.matching { it.name == "remapJar" }.configureEach { dependsOn("generateBuildInfo") }
tasks.matching { it.name == "remapSourcesJar" }.configureEach { dependsOn("generateBuildInfo") }


sourceSets {
    main {
        resources {
            srcDir(buildInfoDir)
        }
    }
}

tasks.processResources.dependsOn("generateBuildInfo")
tasks.jar.dependsOn("generateBuildInfo")

// Add a dynamic manifest entry so the jar changes per build, too
tasks.jar.configure {
    doFirst {
        manifest.attributes(
                "Implementation-Title": project.base.archivesName.get(),
                "Implementation-Version": project.version,
                "Implementation-Build": new Date().format("yyyyMMddHHmmss")
        )
    }
}


import net.fabricmc.loom.task.RemapJarTask
import org.gradle.api.file.DuplicatesStrategy
import org.gradle.api.tasks.bundling.ZipEntryCompression

def remapped = tasks.named("remapJar", RemapJarTask)
def stampFileProvider = layout.buildDirectory.file("tmp/stamp/build.stamp")

tasks.register("generateStamp") {
    outputs.file(stampFileProvider)
    doLast {
        def f = stampFileProvider.get().asFile
        f.parentFile.mkdirs()
        f.text = "id=${java.util.UUID.randomUUID()}\n" +
                "time=${new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")}\n"
    }
}

tasks.register("stampRemappedJar", Jar) {
    dependsOn(remapped, "generateStamp", "processResources")

    preserveFileTimestamps = false
    reproducibleFileOrder = true
    entryCompression = ZipEntryCompression.DEFLATED
    // If something slips through twice, do NOT include the second copy
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // 1) Unpack the remapped jar but forcefully drop any fabric.mod.json we find
    from(remapped.flatMap { it.archiveFile }.map { zipTree(it.asFile) }) {
        exclude("fabric.mod.json")
    }

    // 2) Add the single, filtered fabric.mod.json produced by processResources
    // (Loom puts it here)
    from(layout.buildDirectory.dir("resources/main")) {
        include("fabric.mod.json")
        into("") // root of jar
    }

    // 3) Add a unique stamp so the SHA-1 always changes
    from(stampFileProvider) {
        into("META-INF")
        rename { "build.stamp" }
    }

    destinationDirectory.set(layout.buildDirectory.dir("libs"))
    archiveBaseName.set(project.base.archivesName.get())
    archiveVersion.set(project.version.toString())
    archiveClassifier.set("stamped")
}

// ------------- Modrinth -------------
def mcList = (findProperty("mc_versions")?.toString()?.split(",")?.collect { it.trim() }?.findAll { it }) ?: ["1.20.1"]

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId     = "EEaD8a3s"
    versionNumber = "${project.version}"
    versionName   = "Location Tooltip ${project.version}"
    versionType   = "release"
    uploadFile    = tasks.named("stampRemappedJar").flatMap { it.archiveFile }
    gameVersions  = [project.minecraft_version]
    loaders       = ["fabric"]

    changelog = file("changelogs/${project.version}.md").exists()
            ? file("changelogs/${project.version}.md").text
            : "See commits."

    dependencies { required.project "fabric-api" }
}
tasks.matching { it.name == "releaseModrinth" }.configureEach {
    dependsOn("stampRemappedJar")
}

